<%
	// org.polarsys.kitalpha.doc.gen.business.core.Activator.getDefault().getLog().log(new Status(IStatus.INFO,
	//			org.polarsys.kitalpha.doc.gen.business.core.Activator.PLUGIN_ID, "Starting generate diagram :" + diagram.getName()));
	Session session = DiagramSessionHelper.getCurrentSession();
	IPath outputPath = new Path(projectName).append(outputFolder).append(generatedFolder);
	DiagramExport diagramExport = new DiagramExport(projectName, outputPath, diagram, session);
	Resource sessionResource = session.getSessionResource();
	String id = DiagramSessionHelper.getID(diagram);
	IFile imageFile;
	DRepresentationDescriptor result;
	String mapName;
	String diagramName;
	Boolean diagramDataCached = DiagramExportRegistry.getInstance().hasDataForDiagram(diagram);
	if (diagramDataCached) {
		imageFile = DiagramExportRegistry.getInstance().getDiagramRelatedRegistryObject(diagram).getFile();
		result = DiagramExportRegistry.getInstance().getDiagramRelatedRegistryObject(diagram)
				.getRepresentationDescriptor();
		mapName = DiagramExportRegistry.getInstance().getDiagramRelatedRegistryObject(diagram).getMapName();
		diagramName = DiagramExportRegistry.getInstance().getDiagramRelatedRegistryObject(diagram).getDiagramName();
	} else {
		imageFile = diagramExport.exportAsImage();
		DRepresentationQuery rep2descQuery = new DRepresentationQuery(diagram);
		result = rep2descQuery.getRepresentationDescriptor();
		mapName = id + "_PositionMap";
		diagramName = id;
		if (result != null) {
			mapName = result.getName() + "_" + mapName;
			diagramName = result.getName();
		}
		mapName = DocGenHtmlUtil.getValidFileName(mapName);
		diagramName = DocGenHtmlUtil.getValidFileName(diagramName);
	}

	if (imageFile != null && imageFile.exists()) {
		// Resolve FileNameServices and DiagramHelpers
		Collection<IDiagramHelper> diagramHelpers = new HashSet<IDiagramHelper>();
		Collection<IFileNameService> fileNameServices = new HashSet<IFileNameService>();
		for (String dom : PageExtensionRegistry.getInstance().getDomains()) {
			diagramHelpers.addAll(PageExtensionRegistry.getInstance().getDiagramHelpersExtensions(dom));
			fileNameServices.addAll(PageExtensionRegistry.getInstance().getFileNameServicesExtensions(dom));
		}

		CoordinatesCalculator calculator = new CoordinatesCalculator(imageFile, diagram, helper);
		calculator.contributeHelpers(diagramHelpers);
		Map<Rectangle, EObject> positionMap = calculator.getPositionMap();
		if (!diagramDataCached) {
			DiagramExportRegistry.getInstance().addEntry(diagram, imageFile, result, mapName, diagramName);
		}
		%>
	<div>
	<p class="diagram-name" id="<%=id%>"><%= EscapeChars.forHTML(diagramName)%></p>
	<p class="diagram">
		<img src="<%=generatedFolder%>/<%=imageFile.getName()%>" alt="<%= EscapeChars.forHTML(diagramName)%>" usemap="#<%=mapName%>" />
		
		<br/>
		<br/>
		<map name="<%=mapName%>">
<%
String fragment = null;
String fileName = null;
String modelName = null;

for (Entry<Rectangle, EObject> entrySet : positionMap.entrySet()){
		EObject value = entrySet.getValue();
		Rectangle rectangle = entrySet.getKey();
		Point topLeft = rectangle.getTopLeft();
		Point bottomRight = rectangle.getBottomRight();
				
		fragment = null;
		fileName = null;
		modelName = null;
		
		if (value instanceof DRepresentationDescriptor) {
		
			/*
			 * Handle navigable note
			 */
			
			DRepresentationDescriptor descriptor = (DRepresentationDescriptor) value;
			org.eclipse.sirius.diagram.DDiagram targetDiagram = DiagramSessionHelper.getDDiagram(descriptor);
			if (targetDiagram != null) {
				fragment = DiagramSessionHelper.getID(targetDiagram);
			} else {
				fragment = descriptor.getRepPath().getResourceURI().fragment();
			}
			fileName = fileNameService.getFileName(descriptor.getTarget());
			if (fileName.equals("unknown")) {
				String tmpFileName = fileName;
				for (IFileNameService fileNS: fileNameServices) {
					tmpFileName = fileNS.getFileName(descriptor.getTarget());
					if (tmpFileName != fileName) {
						fileName = tmpFileName;
						break;
					}
				}
			}
			modelName = DocGenHtmlUtil.getModelName(descriptor.getTarget());
			
		} else {
		
			fileName = fileNameService.getFileName(value);
			if (fileName.equals("unknown")) {
				String tmpFileName = fileName;
				for (IFileNameService fileNS: fileNameServices) {
					tmpFileName = fileNS.getFileName(value);
					if (tmpFileName != fileName) {
						fileName = tmpFileName;
						break;
					}
				}
			}
			fragment = helper.getElementId(value);
			rectangle = entrySet.getKey();
			topLeft = rectangle.getTopLeft();
			bottomRight = rectangle.getBottomRight();
			modelName = DocGenHtmlUtil.getModelName(value);
			
		}
%>
			<area shape="rect" group="<%=fileName%>" coords="<%=topLeft.x%>,<%=topLeft.y%>,<%=bottomRight.x%>,<%=bottomRight.y%>" href="../<%=modelName%>/<%=fileName%>.html#<%=fragment%>" alt="<%=fileName%>" />
<%	}
%>		
		</map>
	</p>
	<p class="diagram-description"><%= helper.diagramDocumentationPostTraitement(((DSemanticDiagram)diagram).getTarget(), (result == null) ? "" : result.getDocumentation(), projectName, outputFolder)%></p>
	</div>
<%}
else {
if (diagramName != null && diagramName.isEmpty() == false)
	diagramName = EscapeChars.forHTML(diagramName);
%>
<p class="diagram-name" id="<%=sessionResource.getURIFragment(diagram)%>"><%= diagramName%></p>
<p>image is missing</p>
<p class="diagram-description"><%= (result == null) ? "" : result.getDocumentation()%></p>
<%
			org.polarsys.kitalpha.doc.gen.business.core.Activator.getDefault().getLog().log(
					new Status(IStatus.ERROR,org.polarsys.kitalpha.doc.gen.business.core.Activator.PLUGIN_ID, "Error during diagram export action:" + diagramName));
		}
%>