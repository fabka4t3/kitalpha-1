<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.polarsys.kitalpha.sirius.rotativeimage" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="org.polarsys.kitalpha.sirius.rotativeimage" id="org.polarsys.kitalpha.sirius.rotativeimage" name="Image"/>
      </appinfo>
      <documentation>
         This extension point allows odesign specifiers to create automatically rotating &quot;Workspace images&quot; mapping styles.
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <sequence>
            <element ref="imageid" minOccurs="1" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="imageid">
      <annotation>
         <documentation>
            Each &lt;b&gt;&lt;em&gt;imageid&lt;/em&gt;&lt;/b&gt; extension element defines:
&lt;ul&gt;
&lt;li&gt;a workspace image path (&lt;b&gt;&lt;em&gt;id&lt;/em&gt;&lt;/b&gt; attribute)  used to match the images to use as rotated images; and&lt;/li&gt;
&lt;li&gt;a treatment (&lt;b&gt;&lt;em&gt;kind&lt;/em&gt;&lt;/b&gt; attribute) done on the pointed image&lt;/li&gt;
&lt;/ul&gt;
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  The path to an image. The path must be of the form &lt;b&gt;&lt;em&gt;/project_name/path_to_image/image_name.extension&lt;/em&gt;&lt;/b&gt;
The &lt;b&gt;&lt;em&gt;project_name&lt;/em&gt;&lt;/b&gt; value is resolved first in the workspace and if not found it will be resolved in the platform plugins.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="kind" use="required">
            <annotation>
               <documentation>
                  Specifies the treatment done on the image pointed by the &lt;b&gt;&lt;em&gt;id&lt;/em&gt;&lt;/b&gt; attribute.
If &lt;b&gt;&lt;em&gt;rotative&lt;/em&gt;&lt;/b&gt; then the pointed image will be resolved and its rotation computed. The provided image is the image that will be displayed at the top position the other (left, right, bottom) potiion images are computed.
If &lt;b&gt;&lt;em&gt;4images&lt;/em&gt;&lt;/b&gt; then the pointed image path will be used to compute the path to the 4 turned images. The images path that are looked for are:
&lt;b&gt;&lt;em&gt;/project_name/path_to_image/image_name[_top|_right|_left|_bottom].extension&lt;/em&gt;&lt;/b&gt;
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="rotative">
                  </enumeration>
                  <enumeration value="4images">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         [Enter the first release in which this extension point appears.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         &lt;/br&gt;
An extension &lt;b&gt;&lt;em&gt;imageid&lt;/em&gt;&lt;/b&gt; with 
&lt;/br&gt;
&lt;b&gt;&lt;em&gt;id&lt;/em&gt;&lt;/b&gt; = &quot;/org.polarsys.kitalpha.pdt.modeler.resources/icons/ports/ext_point_obj.gif&quot; and
&lt;/br&gt;
&lt;b&gt;&lt;em&gt;kind&lt;/em&gt;&lt;/b&gt; = &quot;4images&quot;
&lt;/br&gt;
Will look for the four images:
&lt;/br&gt;
/org.polarsys.kitalpha.pdt.modeler.resources/icons/ports/ext_point_obj_top.gif
&lt;/br&gt;
/org.polarsys.kitalpha.pdt.modeler.resources/icons/ports/ext_point_obj_bottom.gif
&lt;/br&gt;
/org.polarsys.kitalpha.pdt.modeler.resources/icons/ports/ext_point_obj_left.gif
&lt;/br&gt;
/org.polarsys.kitalpha.pdt.modeler.resources/icons/ports/ext_point_obj_right.gif
&lt;/br&gt;
&lt;/br&gt;
An extension &lt;b&gt;&lt;em&gt;imageid&lt;/em&gt;&lt;/b&gt; with
&lt;/br&gt;
&lt;b&gt;&lt;em&gt;id&lt;/em&gt;&lt;/b&gt; = &quot;/org.polarsys.kitalpha.pdt.modeler.resources/icons/ports/extension_obj.gif&quot; and
&lt;/br&gt;
&lt;b&gt;&lt;em&gt;kind&lt;/em&gt;&lt;/b&gt; = &quot;rotative&quot;
&lt;/br&gt;
Will rely on the image:
&lt;/br&gt;
/org.polarsys.kitalpha.pdt.modeler.resources/icons/ports/extension_obj.gif
&lt;/br&gt;
That will be rotated when needed.
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="apiinfo"/>
      </appinfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="implementation"/>
      </appinfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="copyright"/>
      </appinfo>
      <documentation>
         Copyright (c) 2020 Thales Global Services S.A.S.
This program and the accompanying materials are made available under the
terms of the Eclipse Public License 2.0 which is available at
http://www.eclipse.org/legal/epl-2.0

SPDX-License-Identifier: EPL-2.0
 
Contributors:
  Thales Global Services S.A.S - initial API and implementation
      </documentation>
   </annotation>

</schema>
